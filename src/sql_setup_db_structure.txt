


DECLARE
--parameters
    --supress EXECUTE IMMEDIATE
    in_noexec                               BOOLEAN := TRUE;
    in_create_tables                        BOOLEAN := FALSE;
    in_compile_procedures                   BOOLEAN := TRUE;

    --DDL formatting
    in_tab                                  CHAR(1 CHAR) := chr(9);
    in_lb                                   CHAR(1 CHAR) := chr(10);

    --naming convention
    in_concept_name                         VARCHAR2(16 CHAR) := 'SET';

    --export table parameters
    in_export_tables_owner                  "USER_USERS"."USERNAME"%TYPE;
    in_export_main_table_name               "USER_TABLES"."TABLE_NAME"%TYPE := 'PROTOTYPE_SET';
    in_export_columns_table_name            "USER_TABLES"."TABLE_NAME"%TYPE := 'PROTOTYPE_SET_HEADER';
    in_export_cells_table_name              "USER_TABLES"."TABLE_NAME"%TYPE := 'PROTOTYPE_SET_DATA';
    in_export_cells_table_cell_type         VARCHAR2(64 CHAR) := 'VARCHAR2(511 BYTE)';
    in_export_log_table_name                "USER_TABLES"."TABLE_NAME"%TYPE := 'PROTOTYPE_SET_LOG';

    --export procedure parameters
    in_export_procedures_owner              "USER_USERS"."USERNAME"%TYPE;
    in_export_log_procedure_name            "USER_PROCEDURES"."PROCEDURE_NAME"%TYPE := 'LOG_MSG';
    in_export_procedure_name                "USER_PROCEDURES"."PROCEDURE_NAME"%TYPE := 'PROTOTYPE_EXPORTER';
    in_export_procedure_bulk_collect_size   INTEGER := 100;
    TYPE t_export_procedure_type_code_map   IS TABLE OF VARCHAR2(64 CHAR) INDEX BY PLS_INTEGER;
    in_export_procedure_type_code_map       t_export_procedure_type_code_map := t_export_procedure_type_code_map(
                                                                        --https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/Data-Types.html
                                                                        --https://docs.oracle.com/en/database/oracle/oracle-database/19/arpls/DBMS_SQL.html
                                                                        1 =>    '"DBMS_SQL"."VARCHAR2_TABLE"',
                                                                        2 =>    '"DBMS_SQL"."NUMBER_TABLE"',
                                                                        12 =>   '"DBMS_SQL"."DATE_TABLE"',
                                                                        96 =>   '"DBMS_SQL"."VARCHAR2_TABLE"',
                                                                        --100 =>  '"DBMS_SQL"."BINARY_FLOAT_TABLE"',
                                                                        --101 =>  '"DBMS_SQL"."BINARY_DOUBLE_TABLE"',
                                                                        180 =>  '"DBMS_SQL"."TIMESTAMP_TABLE"',
                                                                        181 =>  '"DBMS_SQL"."TIMESTAMP_WITH_TIME_ZONE_TABLE"',
                                                                        --182 =>  '"DBMS_SQL"."INTERVAL_YEAR_TO_MONTH_TABLE"',
                                                                        --183 =>  '"DBMS_SQL"."INTERVAL_DAY_TO_SECOND_TABLE"',
                                                                        231 =>  '"DBMS_SQL"."TIMESTAMP_WITH_LTZ_TABLE"'
                                                                    );

    --don't touch
    v_count                                 INTEGER;
    v_sql                                   CLOB;

BEGIN

    SELECT COUNT(1) INTO v_count FROM ALL_USERS
    WHERE "USERNAME" = in_export_tables_owner;
    IF v_count != 1 THEN
        SELECT SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') INTO in_export_tables_owner FROM dual;
        DBMS_OUTPUT.PUT_LINE('in_export_tables_owner := ''' || in_export_tables_owner || ''';');
        DBMS_OUTPUT.NEW_LINE();
    END IF;

    v_sql := 'CREATE TABLE "' || in_export_tables_owner || '"."' || in_export_main_table_name || '"' || in_lb
        || '(' || in_lb
        || in_tab || '"' || in_concept_name ||'_ID"' || in_tab || in_tab || in_tab ||           'INTEGER GENERATED ALWAYS AS IDENTITY (MINVALUE 1 NOMAXVALUE INCREMENT BY 1 START WITH 1 NOCACHE ORDER NOCYCLE NOKEEP NOSCALE) NOT NULL ENABLE, ' || in_lb
        || in_tab || '"CREATE_TS"' || in_tab || in_tab || in_tab ||                             'TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL ENABLE,' || in_lb
        || in_tab || '"PROCESS_TS_START"' || in_tab || in_tab ||in_tab ||                       'TIMESTAMP WITH TIME ZONE,' || in_lb
        || in_tab || '"PROCESS_TS_END"' || in_tab || in_tab ||in_tab ||                         'TIMESTAMP WITH TIME ZONE,' || in_lb
        || in_tab || '"' || in_concept_name ||'_TS"' || in_tab || in_tab || in_tab ||           'TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,' || in_lb
        || in_tab || '"' || in_concept_name ||'_SQL_STMT"' || in_tab || in_tab || in_tab ||     'CLOB NOT NULL ENABLE, ' || in_lb
        || in_tab || '"' || in_concept_name ||'_SQL_STMT_TS_VAR"' || in_tab || in_tab ||        'VARCHAR2(32 CHAR), ' || in_lb
        || in_lb
        || in_tab || 'CONSTRAINT "' || in_export_main_table_name || '_PK" PRIMARY KEY ("' || in_concept_name ||'_ID") USING INDEX ENABLE' || in_lb
        || ')';

    DBMS_OUTPUT.PUT_LINE(v_sql);
    DBMS_OUTPUT.NEW_LINE();    
    IF NOT in_noexec AND in_create_tables THEN
        BEGIN
            EXECUTE IMMEDIATE v_sql;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE(SQLERRM);
                DBMS_OUTPUT.PUT_LINE('SUPRESSING FURTHER DDL STATEMENTS');
                DBMS_OUTPUT.NEW_LINE();
                in_noexec := TRUE;
        END;
    END IF;

    v_sql := 'CREATE TABLE "' || in_export_tables_owner || '"."' || in_export_columns_table_name || '"' || in_lb
        || '(' || in_lb
        || in_tab || '"' || in_concept_name ||'_ID"' || in_tab || in_tab || in_tab ||           'CONSTRAINT "' || in_export_columns_table_name || '_FK" REFERENCES "' || in_export_tables_owner || '"."' || in_export_main_table_name || '"("' || in_concept_name ||'_ID") NOT NULL ENABLE,' || in_lb
        || in_tab || '"COL_INDEX"' || in_tab || in_tab || in_tab ||                             'INTEGER NOT NULL ENABLE,' || in_lb
        || in_tab || '"COL_NAME"' || in_tab || in_tab || in_tab ||                              in_export_cells_table_cell_type || ' NOT NULL ENABLE,' || in_lb
        || in_tab || '"COL_TYPE_CODE"' || in_tab || in_tab || in_tab ||                         'INTEGER NOT NULL ENABLE,' || in_lb
        || in_tab || '"COL_TYPE_LENGTH"' || in_tab || in_tab ||                                 'INTEGER NOT NULL ENABLE,' || in_lb
        || in_tab || '"COL_IS_EXPORTABLE"' || in_tab || in_tab ||                               'NUMBER(1) NOT NULL ENABLE,' || in_lb
        || in_lb
        || in_tab || 'CONSTRAINT "' || in_export_columns_table_name || '_PK" PRIMARY KEY ("' || in_concept_name || '_ID", "COL_INDEX") USING INDEX ENABLE' || in_lb
        || ')';

    DBMS_OUTPUT.PUT_LINE(v_sql);
    DBMS_OUTPUT.NEW_LINE();    
    IF NOT in_noexec AND in_create_tables THEN
        BEGIN
            EXECUTE IMMEDIATE v_sql;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE(SQLERRM);
                DBMS_OUTPUT.PUT_LINE('SUPRESSING FURTHER DDL STATEMENTS');
                DBMS_OUTPUT.NEW_LINE(); 
                in_noexec := TRUE;
        END;
    END IF;

    v_sql := 'CREATE TABLE "' || in_export_tables_owner || '"."' || in_export_cells_table_name || '"' || in_lb
        || '(' || in_lb
        || in_tab || '"' || in_concept_name ||'_ID"' || in_tab || in_tab || in_tab ||           'CONSTRAINT "' || in_export_cells_table_name || '_FK" REFERENCES "' || in_export_tables_owner || '"."' || in_export_main_table_name || '"("' || in_concept_name ||'_ID") NOT NULL ENABLE,' || in_lb
        || in_tab || '"ROW_INDEX"' || in_tab || in_tab || in_tab ||                             'INTEGER NOT NULL ENABLE,' || in_lb
        || in_tab || '"COL_INDEX"' || in_tab || in_tab || in_tab ||                             'INTEGER NOT NULL ENABLE,' || in_lb
        || in_tab || '"VALUE"' || in_tab || in_tab || in_tab || in_tab ||                       in_export_cells_table_cell_type || ',' || in_lb
        || in_lb
        || in_tab || 'CONSTRAINT "' || in_export_cells_table_name || '_PK" PRIMARY KEY ("' || in_concept_name || '_ID", "ROW_INDEX", "COL_INDEX") USING INDEX ENABLE' || in_lb
        || ')';

    DBMS_OUTPUT.PUT_LINE(v_sql);
    DBMS_OUTPUT.NEW_LINE();    
    IF NOT in_noexec AND in_create_tables THEN
        BEGIN
            EXECUTE IMMEDIATE v_sql;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE(SQLERRM);
                DBMS_OUTPUT.PUT_LINE('SUPRESSING FURTHER DDL STATEMENTS');
                DBMS_OUTPUT.NEW_LINE(); 
                in_noexec := TRUE;
        END;
    END IF;

    v_sql := 'CREATE TABLE "' || in_export_tables_owner || '"."' || in_export_log_table_name || '"' || in_lb
        || '(' || in_lb
        || in_tab || '"MSG_ID"' || in_tab || in_tab || in_tab ||                                'INTEGER GENERATED ALWAYS AS IDENTITY (MINVALUE 1 NOMAXVALUE INCREMENT BY 1 START WITH 1 NOCACHE ORDER NOCYCLE NOKEEP NOSCALE) NOT NULL ENABLE, ' || in_lb
        || in_tab || '"' || in_concept_name ||'_ID"' || in_tab || in_tab || in_tab ||           'CONSTRAINT "' || in_export_log_table_name || '_FK" REFERENCES "' || in_export_tables_owner || '"."' || in_export_main_table_name || '"("' || in_concept_name ||'_ID"),' || in_lb
        || in_tab || '"MSG_TS"' || in_tab || in_tab || in_tab ||                                'TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL ENABLE,' || in_lb
        || in_tab || '"MSG"' || in_tab || in_tab || in_tab || in_tab ||                         'VARCHAR2(512 CHAR),' || in_lb
        || in_lb
        || in_tab || 'CONSTRAINT "' || in_export_log_table_name || '_PK" PRIMARY KEY ("MSG_ID") USING INDEX ENABLE' || in_lb
        || ')';

    DBMS_OUTPUT.PUT_LINE(v_sql);
    DBMS_OUTPUT.NEW_LINE();
    IF NOT in_noexec AND in_create_tables THEN
        BEGIN
            EXECUTE IMMEDIATE v_sql;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE(SQLERRM);
                DBMS_OUTPUT.PUT_LINE('SUPRESSING FURTHER DDL STATEMENTS');
                DBMS_OUTPUT.NEW_LINE();
                in_noexec := TRUE;
        END;
    END IF;

    SELECT COUNT(1) INTO v_count FROM ALL_USERS
    WHERE "USERNAME" = in_export_procedures_owner;
    IF v_count != 1 THEN
        SELECT SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') INTO in_export_procedures_owner FROM dual;
        DBMS_OUTPUT.PUT_LINE('in_export_procedures_owner := ''' || in_export_procedures_owner || ''';');
        DBMS_OUTPUT.NEW_LINE();
    END IF;

    v_sql :=
        'CREATE OR REPLACE PROCEDURE "' || in_export_procedures_owner || '"."' || in_export_log_procedure_name || '" (' || in_lb
        || in_tab || 'in_' || LOWER(in_concept_name) || '_id' || in_tab || in_tab ||        'IN "' || in_export_tables_owner || '"."' || in_export_main_table_name || '"."' || in_concept_name || '_ID"%TYPE,' || in_lb
        || in_tab || 'in_msg' || in_tab || in_tab || in_tab ||                              'IN VARCHAR2' || in_lb
        || ')' || in_lb
        || 'AS' || in_lb
        || in_tab || 'PRAGMA AUTONOMOUS_TRANSACTION;'
        || in_lb
        || 'BEGIN' || in_lb
        || in_lb
        || in_tab || 'INSERT INTO "' || in_export_tables_owner || '"."' || in_export_log_table_name || '"("' || in_concept_name || '_ID", "MSG")' || in_lb
        || in_tab || in_tab || 'VALUES (in_' || LOWER(in_concept_name) || '_id, in_msg);' || in_lb
        || in_tab || 'COMMIT;' || in_lb
        || in_lb
        || 'END ' || in_export_log_procedure_name || ';';

    DBMS_OUTPUT.PUT_LINE(v_sql);
    DBMS_OUTPUT.NEW_LINE();
    IF NOT in_noexec AND in_compile_procedures THEN
        BEGIN
            EXECUTE IMMEDIATE v_sql;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE(SQLERRM);
                DBMS_OUTPUT.PUT_LINE('SUPRESSING FURTHER DDL STATEMENTS');
                DBMS_OUTPUT.NEW_LINE();
                in_noexec := TRUE;
        END;
    END IF;

    v_sql :=
        'CREATE OR REPLACE PROCEDURE "' || in_export_procedures_owner || '"."' || in_export_procedure_name || '" (' || in_lb
        || in_tab || 'in_' || LOWER(in_concept_name) || '_id' || in_tab || in_tab || in_tab ||      'IN VARCHAR2' || in_lb
        || ')' || in_lb
        || 'IS ' || in_lb
        || in_lb
        || in_tab || 'v_cursor' || in_tab || in_tab || in_tab ||                                    'INTEGER;' || in_lb
        || in_tab || 'v_col_count' || in_tab || in_tab || in_tab ||                                 'INTEGER;' || in_lb
        || in_tab || 'v_col_desc' || in_tab || in_tab || in_tab ||                                  'DBMS_SQL.DESC_TAB2;' || in_lb
        || in_lb
        || in_tab || 'v_' || LOWER(in_concept_name) || '_ts' || in_tab || in_tab || in_tab ||       '"' || in_export_tables_owner || '"."' || in_export_main_table_name || '"."' || in_concept_name || '_TS"%TYPE;' || in_lb
        || in_tab || 'v_' || LOWER(in_concept_name) || '_sql_stmt' || in_tab || in_tab || in_tab || '"' || in_export_tables_owner || '"."' || in_export_main_table_name || '"."' || in_concept_name || '_SQL_STMT"%TYPE;' || in_lb
        || in_tab || 'v_' || LOWER(in_concept_name) || '_ts_var' || in_tab || in_tab || in_tab ||   '"' || in_export_tables_owner || '"."' || in_export_main_table_name || '"."' || in_concept_name || '_SQL_STMT_TS_VAR"%TYPE;' || in_lb
        || in_lb;

    DECLARE
        i_type_code         PLS_INTEGER;
    BEGIN
        i_type_code := in_export_procedure_type_code_map.FIRST;
        LOOP
        EXIT WHEN i_type_code IS NULL;
            v_sql := v_sql
            || in_tab || 'v_tmp_tbl_' || i_type_code || in_tab || in_tab || in_tab || in_export_procedure_type_code_map(i_type_code) || ';' || in_lb;
            i_type_code := in_export_procedure_type_code_map.NEXT(i_type_code);
        END LOOP;
    END;

    v_sql := v_sql
        || in_lb
        || 'BEGIN' || in_lb
        || in_lb
        || in_tab || 'BEGIN' || in_lb
        || in_tab || in_tab || 'SELECT "' || in_concept_name || '_TS", "' || in_concept_name || '_SQL_STMT", "' || in_concept_name || '_SQL_STMT_TS_VAR"' || in_lb
        || in_tab || in_tab || 'INTO ' || 'v_' || LOWER(in_concept_name) || '_ts, v_' || LOWER(in_concept_name) || '_sql_stmt, v_' || LOWER(in_concept_name) || '_ts_var' || in_lb
        || in_tab || in_tab || 'FROM "' || in_export_tables_owner || '"."' || in_export_main_table_name || '"' || in_lb
        || in_tab || in_tab || 'WHERE "' || in_concept_name || '_ID" = in_' || LOWER(in_concept_name) || '_id AND "PROCESS_TS_START" IS NULL' || in_lb
        || in_tab || in_tab || 'FOR UPDATE NOWAIT;' || in_lb
        || in_lb
        || in_tab || in_tab || 'UPDATE "' || in_export_tables_owner || '"."' || in_export_main_table_name || '"' || in_lb
        || in_tab || in_tab || 'SET "PROCESS_TS_START" = CURRENT_TIMESTAMP' || in_lb
        || in_tab || in_tab || 'WHERE "' || in_concept_name || '_ID" = in_' || LOWER(in_concept_name) || '_id;' || in_lb
        || in_lb
        || in_tab || in_tab || 'COMMIT;' || in_lb    
        || in_tab || 'EXCEPTION' || in_lb
        || in_tab || in_tab || 'WHEN OTHERS THEN' || in_lb
        || in_tab || in_tab || in_tab || '"' || in_export_procedures_owner || '"."' || in_export_log_procedure_name || '"(NULL, ''SET SQL RETRIEVAL ERROR ON in_' || LOWER(in_concept_name) || '_id = '' || in_' || LOWER(in_concept_name) || '_id || '': '' || SQLERRM);' || in_lb
        || in_tab || in_tab || in_tab || 'RETURN;' || in_lb
        || in_tab || 'END;' || in_lb
        || in_lb
        || in_tab || 'BEGIN' || in_lb
        || in_tab || in_tab || 'v_cursor := DBMS_SQL.OPEN_CURSOR();' || in_lb
        || in_tab || 'EXCEPTION' || in_lb
        || in_tab || in_tab || 'WHEN OTHERS THEN' || in_lb
        || in_tab || in_tab || in_tab || '"' || in_export_procedures_owner || '"."' || in_export_log_procedure_name || '"(in_' || LOWER(in_concept_name) || '_id, ''CURSOR ALLOCATION ERROR'');' || in_lb
        || in_tab || in_tab || in_tab || 'RAISE;' || in_lb
        || in_tab || 'END;' || in_lb
        || in_lb
        || in_tab || 'BEGIN' || in_lb
        || in_tab || in_tab || 'DBMS_SQL.PARSE(v_cursor, ''SELECT * FROM ('' || v_' || LOWER(in_concept_name) || '_sql_stmt || '')'', DBMS_SQL.NATIVE);' || in_lb
        || in_tab || 'EXCEPTION' || in_lb
        || in_tab || in_tab || 'WHEN OTHERS THEN' || in_lb
        || in_tab || in_tab || in_tab || '"' || in_export_procedures_owner || '"."' || in_export_log_procedure_name || '"(in_' || LOWER(in_concept_name) || '_id, ''PARSE ERROR'');' || in_lb
        || in_tab || in_tab || in_tab || 'RAISE;' || in_lb
        || in_tab || 'END;' || in_lb
        || in_lb
        || in_tab || 'IF v_' || LOWER(in_concept_name) || '_ts_var IS NOT NULL THEN' || in_lb
        || in_tab || in_tab || 'BEGIN' || in_lb
        || in_tab || in_tab || in_tab || 'DBMS_SQL.BIND_VARIABLE(v_cursor, v_' || LOWER(in_concept_name) || '_ts_var, v_' || LOWER(in_concept_name) || '_ts);' || in_lb
        || in_tab || in_tab || 'EXCEPTION' || in_lb
        || in_tab || in_tab || in_tab || 'WHEN OTHERS THEN' || in_lb
        || in_tab || in_tab || in_tab || in_tab || '"' || in_export_procedures_owner || '"."' || in_export_log_procedure_name || '"(in_' || LOWER(in_concept_name) || '_id, ''VARIABLE BINDING ERROR'');' || in_lb
        || in_tab || in_tab || in_tab || in_tab || 'RAISE;' || in_lb    
        || in_tab || in_tab || 'END;' || in_lb
        || in_tab || 'END IF;' || in_lb
        || in_lb    
        || in_tab || 'DECLARE' || in_lb
        || in_tab || in_tab || 'i_col' || in_tab || in_tab || 'INTEGER := 0;' || in_lb
        || in_tab || 'BEGIN' || in_lb
        || in_tab || in_tab || 'DBMS_SQL.DESCRIBE_COLUMNS2(v_cursor, v_col_count, v_col_desc);' || in_lb
        || in_lb
        || in_tab || in_tab || 'i_col := 1;' || in_lb
        || in_tab || in_tab || 'LOOP' || in_lb
        || in_tab || in_tab || 'EXIT WHEN i_col > v_col_count;' || in_lb
        || in_tab || in_tab || in_tab || 'CASE v_col_desc(i_col).col_type' || in_lb;

    DECLARE
        i_type_code         PLS_INTEGER;
    BEGIN
        i_type_code := in_export_procedure_type_code_map.FIRST;
        LOOP
        EXIT WHEN i_type_code IS NULL;
            v_sql := v_sql
                || in_tab || in_tab || in_tab || in_tab || 'WHEN ' || i_type_code || ' THEN' || in_lb
                || in_tab || in_tab || in_tab || in_tab || in_tab || 'DBMS_SQL.DEFINE_ARRAY(v_cursor, i_col, v_tmp_tbl_' || i_type_code || ', ' || in_export_procedure_bulk_collect_size || ', 1);' || in_lb
                || in_tab || in_tab || in_tab || in_tab || in_tab || 'INSERT INTO "' || in_export_tables_owner || '"."' || in_export_columns_table_name || '" ("' || in_concept_name || '_ID", "COL_INDEX", "COL_NAME", "COL_TYPE_CODE", "COL_TYPE_LENGTH", "COL_IS_EXPORTABLE")' || in_lb
                || in_tab || in_tab || in_tab || in_tab || in_tab || in_tab || 'VALUES (in_' || LOWER(in_concept_name) || '_id, i_col, v_col_desc(i_col).col_name, v_col_desc(i_col).col_type, v_col_desc(i_col).col_max_len, 1);' || in_lb;
            i_type_code := in_export_procedure_type_code_map.NEXT(i_type_code);
        END LOOP;
    END;

    v_sql := v_sql
        || in_tab || in_tab || in_tab || in_tab || 'ELSE' || in_lb
        || in_tab || in_tab || in_tab || in_tab || in_tab || 'INSERT INTO "' || in_export_tables_owner || '"."' || in_export_columns_table_name || '" ("' || in_concept_name || '_ID", "COL_INDEX", "COL_NAME", "COL_TYPE_CODE", "COL_TYPE_LENGTH", "COL_IS_EXPORTABLE")' || in_lb
        || in_tab || in_tab || in_tab || in_tab || in_tab || in_tab || 'VALUES (in_' || LOWER(in_concept_name) || '_id, i_col, v_col_desc(i_col).col_name, v_col_desc(i_col).col_type, v_col_desc(i_col).col_max_len, 0);' || in_lb
        || in_tab || in_tab || in_tab || in_tab || in_tab || 'v_col_desc(i_col).col_type := -1;' || in_lb
        || in_tab || in_tab || in_tab || 'END CASE;' || in_lb
        || in_tab || in_tab || in_tab || 'i_col := i_col + 1;' || in_lb
        || in_tab || in_tab || 'END LOOP;' || in_lb
        || in_tab || in_tab || 'COMMIT;' || in_lb
        || in_tab || 'EXCEPTION' || in_lb
        || in_tab || in_tab || 'WHEN OTHERS THEN' || in_lb
        || in_tab || in_tab || in_tab || '"' || in_export_procedures_owner || '"."' || in_export_log_procedure_name || '"(in_' || LOWER(in_concept_name) || '_id, ''SCANNING COLUMNS OF v_cursor FAILED AT i_col = '' || i_col);' || in_lb
        || in_tab || in_tab || in_tab || 'RAISE;' || in_lb
        || in_tab || 'END;' || in_lb
        || in_lb
        || in_tab || 'DECLARE' || in_lb
        || in_tab || in_tab || 'v_row_count' || in_tab || 'INTEGER;' || in_lb
        || in_lb
        || in_tab || in_tab || 'i_row' || in_tab || in_tab ||   'INTEGER := 0;' || in_lb
        || in_tab || in_tab || 'i_col' || in_tab || in_tab ||   'INTEGER := 0;' || in_lb
        || in_tab || 'BEGIN' || in_lb
        || in_tab || in_tab || 'v_row_count := DBMS_SQL.EXECUTE(v_cursor);' || in_lb
        || in_lb
        || in_tab || in_tab || 'i_row := 1;' || in_lb
        || in_tab || in_tab || 'LOOP' || in_lb
        || in_tab || in_tab || in_tab || 'v_row_count := DBMS_SQL.FETCH_ROWS(v_cursor);' || in_lb
        || in_tab || in_tab || in_tab || 'EXIT WHEN v_row_count = 0;' || in_lb
        || in_tab || in_tab || in_tab || 'i_col := 1;' || in_lb
        || in_tab || in_tab || in_tab || 'LOOP' || in_lb
        || in_tab || in_tab || in_tab || in_tab || 'EXIT WHEN i_col > v_col_count;' || in_lb
        || in_tab || in_tab || in_tab || in_tab || 'CASE v_col_desc(i_col).col_type' || in_lb;

    DECLARE
        i_type_code         PLS_INTEGER;
    BEGIN
        i_type_code := in_export_procedure_type_code_map.FIRST;
        LOOP
        EXIT WHEN i_type_code IS NULL;
            v_sql := v_sql
                || in_tab || in_tab || in_tab || in_tab || in_tab || 'WHEN ' || i_type_code || ' THEN' || in_lb
                || in_tab || in_tab || in_tab || in_tab || in_tab || in_tab || 'DBMS_SQL.COLUMN_VALUE(v_cursor, i_col, v_tmp_tbl_' || i_type_code || ');' || in_lb
                || in_tab || in_tab || in_tab || in_tab || in_tab || in_tab || 'FOR i_bulk IN 0 .. v_row_count - 1' || in_lb
                || in_tab || in_tab || in_tab || in_tab || in_tab || in_tab || 'LOOP' || in_lb
                || in_tab || in_tab || in_tab || in_tab || in_tab || in_tab || in_tab || 'INSERT INTO "' || in_export_tables_owner || '"."' || in_export_cells_table_name || '" ("' || in_concept_name || '_ID", "COL_INDEX", "ROW_INDEX", "VALUE")' || in_lb
                || in_tab || in_tab || in_tab || in_tab || in_tab || in_tab || in_tab || in_tab || 'VALUES (in_' || LOWER(in_concept_name) || '_id, i_col, i_row + i_bulk, v_tmp_tbl_' || i_type_code || '(i_row + i_bulk));' || in_lb
                || in_tab || in_tab || in_tab || in_tab || in_tab || in_tab || 'END LOOP;' || in_lb;
            i_type_code := in_export_procedure_type_code_map.NEXT(i_type_code);
        END LOOP;
    END;

    v_sql := v_sql
        || in_tab || in_tab || in_tab || in_tab || in_tab || 'ELSE' || in_lb
        || in_tab || in_tab || in_tab || in_tab || in_tab || in_tab || 'NULL;' || in_lb    
        || in_tab || in_tab || in_tab || in_tab || 'END CASE;' || in_lb
        || in_tab || in_tab || in_tab || in_tab || 'i_col := i_col + 1;' || in_lb
        || in_tab || in_tab || in_tab || 'END LOOP;' || in_lb
        || in_tab || in_tab || 'EXIT WHEN v_row_count != ' || in_export_procedure_bulk_collect_size || ';' || in_lb
        || in_tab || in_tab || in_tab || 'i_row := i_row + v_row_count;' || in_lb
        || in_tab || in_tab || 'END LOOP;' || in_lb
        || in_tab || in_tab || 'COMMIT;' || in_lb
        || in_tab || 'EXCEPTION' || in_lb
        || in_tab || in_tab || 'WHEN OTHERS THEN' || in_lb
        || in_tab || in_tab || in_tab || '"' || in_export_procedures_owner || '"."' || in_export_log_procedure_name || '"(in_' || LOWER(in_concept_name) || '_id, ''FETCHING FROM v_cursor FAILED AT i_col = '' || i_col || '', i_row = '' || i_row);' || in_lb
        || in_tab || in_tab || in_tab || 'RAISE;' || in_lb
        || in_tab || 'END;' || in_lb
        || in_lb
        || in_tab || 'BEGIN' || in_lb
        || in_tab || in_tab || 'UPDATE "' || in_export_tables_owner || '"."' || in_export_main_table_name || '"' || in_lb
        || in_tab || in_tab || 'SET "PROCESS_TS_END" = CURRENT_TIMESTAMP' || in_lb
        || in_tab || in_tab || 'WHERE "' || in_concept_name || '_ID" = in_' || LOWER(in_concept_name) || '_id;' || in_lb
        || in_lb
        || in_tab || in_tab || 'COMMIT;' || in_lb
        || in_tab || 'EXCEPTION' || in_lb
        || in_tab || in_tab || 'WHEN OTHERS THEN' || in_lb
        || in_tab || in_tab || in_tab || '"' || in_export_procedures_owner || '"."' || in_export_log_procedure_name || '"(in_' || LOWER(in_concept_name) || '_id, ''UPDATE OF "PROCESS_TS_END" FAILED'');' || in_lb
        || in_tab || in_tab || in_tab || 'RAISE;' || in_lb
        || in_tab || 'END;' || in_lb
        || in_lb
        || in_tab || 'DBMS_SQL.CLOSE_CURSOR(v_cursor);' || in_lb
        || in_lb
        || 'EXCEPTION' || in_lb
        || in_tab || 'WHEN OTHERS THEN' || in_lb
        || in_tab || in_tab || '"' || in_export_procedures_owner || '"."' || in_export_log_procedure_name || '"(in_' || LOWER(in_concept_name) || '_id, SQLERRM);' || in_lb
        || in_tab || in_tab || 'IF DBMS_SQL.IS_OPEN(v_cursor) THEN' || in_lb
        || in_tab || in_tab || in_tab || '"' || in_export_procedures_owner || '"."' || in_export_log_procedure_name || '"(in_' || LOWER(in_concept_name) || '_id, ''CLOSING v_cursor'');' || in_lb
        || in_tab || in_tab || in_tab || 'DBMS_SQL.CLOSE_CURSOR(v_cursor);' || in_lb
        || in_tab || in_tab || 'END IF;' || in_lb
        || in_tab || in_tab  || '"' || in_export_procedures_owner || '"."' || in_export_log_procedure_name || '"(in_' || LOWER(in_concept_name) || '_id, ''v_cursor IS CLOSED'');' || in_lb
        || in_tab || in_tab || 'ROLLBACK;' || in_lb
        --|| in_tab || in_tab || 'RAISE;' || in_lb
        || 'END ' || in_export_procedure_name || ';';

    DBMS_OUTPUT.PUT_LINE(v_sql);
    DBMS_OUTPUT.NEW_LINE();
    IF NOT in_noexec AND in_compile_procedures THEN
        BEGIN
            EXECUTE IMMEDIATE v_sql;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE(SQLERRM);
                DBMS_OUTPUT.PUT_LINE('ERROR; SUPRESSING FURTHER DDL STATEMENTS');
                DBMS_OUTPUT.NEW_LINE();
                in_noexec := TRUE;
        END;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
